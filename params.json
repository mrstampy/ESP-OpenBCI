{"name":"Esp-openbci","tagline":"ESP OpenBCI - An EEG Signal Processing Library for OpenBCI Hardware","body":"# ESP OpenBCI - An EEG Signal Processing Library for OpenBCI Hardware\r\n\r\nThis library provides the OpenBCI implementation of the [ESP](http://mrstampy.github.io/ESP/) library classes. It is designed to be fast and efficient, using high performance Java libraries:\r\n\r\n* [Disruptor](https://github.com/LMAX-Exchange/disruptor)\r\n* [Javolution](http://javolution.org/)\r\n* [Apache MINA](http://mina.apache.org/)\r\n* [RxJava](https://github.com/Netflix/RxJava/)\r\n\r\n## Release 2.1-RC2, 06-06-14 (Bugfix, Experimental)\r\n\r\nThe OpenBCI implementation requires a properties file named 'esp.openbci.properties' to be completed and available on the root of the classpath. An example\r\nfile can be found [in the repository](https://github.com/mrstampy/ESP-OpenBCI/blob/master/ESP-OpenBCI/config/esp.openbci.properties).\r\n\r\n## Design Goals\r\n\r\nESP is designed to provide Java programs access to EEG device signals and provide the ability to process the signals for the purposes of the program. The ESP library itself is not an implementation, however there are several implementations for specific EEG devices:\r\n\t\r\n* [ESP-Nia](http://mrstampy.github.io/ESP-Nia/)\r\n* [ESP-ThinkGear](http://mrstampy.github.io/ESP-ThinkGear/)\r\n* [ESP-OpenBCI (experimental)](http://mrstampy.github.io/ESP-OpenBCI/)\r\n* [ESPLab (JavaFX 8.0 GUI for the ESP Lab interface)](http://mrstampy.github.io/ESPLab/)\r\n\t\r\nESP provides a common structure for device specific implementations.  This allows programs using the ESP libraries to cater for multiple devices from a single codebase.\r\n\r\n## Primary Design Specifics\r\n\r\n### [The MultiConnectSocket Interface](https://github.com/mrstampy/ESP/blob/master/ESP/src/com/github/mrstampy/esp/multiconnectionsocket/MultiConnectionSocket.java)\r\n\r\nThis interface defines the methods that must be implemented for a class\twhich provides access to EEG hardware. An [abstract superclass](https://github.com/mrstampy/ESP/blob/master/ESP/src/com/github/mrstampy/esp/multiconnectionsocket/AbstractMultiConnectionSocket.java) exists for ease of implementation.\r\n\r\n### [The RawEspConnection Interface](https://github.com/mrstampy/ESP/blob/master/ESP/src/com/github/mrstampy/esp/dsp/lab/RawEspConnection.java)\r\n\r\nRawEspConnection extends the MultiConnectSocket interface. Implementations are intended to encapsulate and control a MultiConnectSocket instance through the implementation of the common methods, as well as provide the current seconds' worth of samples on demand for direct use or further processing.  Signal processing methods exist to provide ease of processing the signal.  An [abstract superclass](https://github.com/mrstampy/ESP/blob/master/ESP/src/com/github/mrstampy/esp/dsp/lab/AbstractRawEspConnection.java) exists for ease of implementation.\r\n\r\n### [The Lab Interface](https://github.com/mrstampy/ESP/blob/master/ESP/src/com/github/mrstampy/esp/dsp/lab/Lab.java)\r\n\r\nWhile the ESP library provides DSP processing classes, how the signal is processed is left to programs using the library.  Lab implementations provide the ability to obtain the current seconds' worth of samples from the encapsulated RawEspConnection, process the signal and notify the program when a sample is ready for use.\r\n\r\nA [default implementation](https://github.com/mrstampy/ESP/blob/master/ESP/src/com/github/mrstampy/esp/dsp/lab/DefaultLab.java)\r\nexists and an [abstract superclass](https://github.com/mrstampy/ESP/blob/master/ESP/src/com/github/mrstampy/esp/dsp/lab/AbstractLab.java) provides ease\r\nof custom lab implementation. \r\n\r\n## Usage\r\n\r\n### Direct MultiConnectSocket Usage\r\n\r\nThis is the lowest level use case.  Programs using ESP library implementations in this manner will receive device-specific signals as they occur.  Each implementation of the ESP library's MultiConnectSocket has a device-specific listener mechanism to obtain the signal.  Pseudo code for usage appears as so:\r\n\r\n\t\tMultiConnectOpenBCISocket socket = new MultiConnectOpenBCISocket();\r\n\t\t\r\n\t\t// optional, common to all MultiConnectSocket implementations:\r\n\t\t// add a listener to receive connect/disconnect events\r\n\t\tsocket.addConnectionEventListener(new ConnectionEventListener() {\r\n\t\t\tpublic void connectionEventPerformed(ConnectionEvent e) {\r\n\t\t\t\tdoSomethingWith(e);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tsocket.addListener(new OpenBCIEventListener() {\r\n\t\t\tpublic void dataEventPerformed(OpenBCIEvent event) {\r\n\t\t\t\tdoSomethingWith(e);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tsocket.start();\r\n\r\n### Direct MultiConnectSocket Usage - Remote Connection\r\n\r\nThis functionality is from where the MultiConnectSocket derives its name.  Device specific implementations provide the ability to open a socket on a configurable port.  Such sockets facilitate a subscribe and publish of device signals. This allows separate processes and machines to [receive the device signals](https://github.com/mrstampy/ESP/blob/master/ESP/src/com/github/mrstampy/esp/multiconnectionsocket/AbstractSocketConnector.java) for their own purposes - signal recording, secondary processing, display etc.\r\n\t\t\t\r\n\t\t// on the host machine or process:\r\n\t\t// port is set via the system property 'socket.broadcaster.port', default '12345'\r\n\t\tMultiConnectOpenBCISocket socket = new MultiConnectOpenBCISocket(true);\r\n\t\t\r\n\t\t// on the remote process/machine:\r\n\t\t// port is set via the system property 'socket.broadcaster.port', default '12345'\r\n\t\tOpenBCISocketConnector connector = new OpenBCISocketConnector(\"host machine name or IP address\");\r\n\t\t\r\n\t\tconnector.addListener(new OpenBCIEventListener() {\r\n\t\t\tpublic void dataEventPerformed(OpenBCIEvent event) {\r\n\t\t\t\tdoSomethingWith(e);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tconnector.connect();\r\n\t\tconnector.subscribe(....);\r\n\t\t\r\n\t\t// and back on the host machine or process:\r\n\t\tsocket.start();\r\n\r\n### RawEspConnection Usage\r\n\r\nRawEspConnection implementations aggregate the current second's worth of data, insulating the program from device specific listeners.  The samples are intended to be queried periodically in a separate scheduled task or thread.  The period of querying is left to the program and is independent of sample rate.\r\n\t\r\n\t\tOpenBCIConnection connection = new OpenBCIConnection();\r\n\t\t\r\n\t\t// optional, common to all RawEspConnection implementations:\r\n\t\t// add a listener to receive connect/disconnect events\r\n\t\tconnection.addConnectionEventListener(new ConnectionEventListener() {\r\n\t\t\tpublic void connectionEventPerformed(ConnectionEvent e) {\r\n\t\t\t\tdoSomethingWith(e);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tconnection.start();\r\n\t\t\r\n\t\t// in a separate scheduled periodic task..\r\n\t\tint channel = 1; // channel of interest \r\n\t\tdealWithCurrentSecondOfSamples(connection.getCurrentFor(channel));\r\n\r\n### Lab Usage\r\n\r\nLab implementations provide the ability to process the current seconds' worth of data from the RawEspConnection and notify any interested parties of its completion. Triggering of signal processing is intended to be executed periodically in a separate scheduled task or thread.  The period of triggering is left to the program and is independent of sample rate.\r\n\r\n\t\tOpenBCIConnection connection = new OpenBCIConnection();\r\n\t\t\r\n\t\t// optional, common to all RawEspConnection implementations:\r\n\t\t// add a listener to receive connect/disconnect events\r\n\t\tconnection.addConnectionEventListener(new ConnectionEventListener() {\r\n\t\t\tpublic void connectionEventPerformed(ConnectionEvent e) {\r\n\t\t\t\tdoSomethingWith(e);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tLab lab = connection.getDefaultLab();\r\n\t\t\r\n\t\tint numBands = 40; // first 40 bands\r\n\t\tlab.setNumBands(numBands); // must be set\r\n\t\t\r\n\t\tint channel = 1; // channel of interest for multichannels\r\n\t\tlab.setChannel(channel); // required if > 1 channel\r\n\t\t\r\n\t\tlab.addSignalProcessedListener(new SignalProcessedListener() {\r\n\t\t\tpublic void signalProcessed(double[] processed) {\r\n\t\t\t\tdoSomethingWith(processed);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// other lab values set as appropriate for processing the signal\r\n\t\t\r\n\t\tconnection.start();\r\n\t\t\r\n\t\t// in a separate scheduled periodic task..\r\n\t\tlab.triggerProcessing();\r\n\r\n\r\n## Maven Dependency\r\n       <dependency>\r\n           <groupId>com.github.mrstampy</groupId>\r\n           <artifactId>esp-openbci</artifactId>\r\n           <version>2.1-RC2</version>\r\n       </dependency>\r\n\r\nAdditional functionality is described in the JavaDocs. This work is released under the GPL 3.0 license. No warranty of any kind is offered.\r\n\r\n[ESP-OpenBCI](http://mrstampy.github.io/ESP-OpenBCI/) Copyright (C) 2014 Burton Alexander. \r\n\r\n[OpenBCI](http://www.openbci.com/) is a trademark of OpenBCI\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}